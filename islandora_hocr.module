<?php

/**
 * @file
 * Module file.
 */

/**
 * Be sure the fields we're expecting are there, and create if not.
 *
 * ASSUMPTIONS:
 * - You've already created these field configs, probably through the GUI.
 * - They're stored in ../config.
 *
 * @param array $entitytypes_fields
 *   A 3-dimensional array. The first level is entity types, the second is
 *   bundles, and the third is the fields you want to ensure. E.g.
 *   [
 *   'taxonomy_term' => [
 *     'islandora_media_use' => [
 *       'field_foo',
 *       'field_bar',
 *     ],
 *   ],
 *   ].
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */

use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Config\FileStorage;

/**
 * Make sure that fields and config exists.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function islandora_hocr_ensure_fields_exist(array $entitytypes_fields) {
  $config_directory = new FileStorage(Settings::get('config_sync_directory'));
  foreach ($entitytypes_fields as $entitytype => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      $bundle_name = 'taxonomy.vocabulary.' . $bundle;
      $config_record = $config_directory->read($bundle_name);
      $config_storage = \Drupal::service('config.storage');
      $config_storage->write($bundle_name, $config_record);
      foreach ($fields as $field) {
        $field_storage_name = 'field.storage.' . $entitytype . '.' . $field;
        $config_record = $config_directory->read($field_storage_name);
        if (!FieldStorageConfig::loadByName($config_record['entity_type'], $config_record['field_name'])) {
          FieldStorageConfig::create($config_record)->save();
        }
        $field_config_name = 'field.field.' . $entitytype . '.' . $bundle . '.' . $field;
        $config_record = $config_directory->read($field_config_name);
        if (!FieldConfig::loadByName($config_record['entity_type'], $config_record['bundle'], $config_record['field_name'])) {
          FieldConfig::create($config_record)->save();
        }
      }
    }
  }
}
